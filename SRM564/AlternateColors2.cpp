#include <vector>
#include <map>
#include <set>
#include <queue>
#include <bitset>
#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>

using namespace std;

#define X first
#define Y second
#define mk make_pair
#define rep(i, s, t) for (int i = (s); i <= (t); ++i)
#define REP(i, n) rep(i, 1, n)
typedef pair<int, int> PII;
typedef long long LL;
typedef double LD;

class AlternateColors2 {
public:
	long long f[111111][9][3];
	int K;
	int nxt(int k, int sta){
		while (1){
			k = k + 1;
			k %= 3;
			if (sta & (1 << k))
				return k;
		}
	}
	long long calc(int i, int sta, int k){
		if (i == 0)
			return sta == 0;
		if (sta == 0)
			return 0;
		if (i == K && k != 0)
			return 0;
		if (f[i][sta][k] != -1)
			return f[i][sta][k];
		f[i][sta][k] = calc(i - 1, sta, nxt(k, sta)) + calc(i - 1, sta - (1 << k), nxt(k, sta));
		//printf("f[%d,%d,%d] =   %lld\n", i, sta, k, f[i][sta][k]);
		return f[i][sta][k];
	}
	long long countWays(int n, int k) {
		memset(f, -1, sizeof f);
		long long ans = 0;
		K = n - k + 1;
		ans += calc(n, 1, 0);
		ans += calc(n, 3, 0);
		ans += calc(n, 5, 0);
		ans += calc(n, 7, 0);
		return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, long long p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	AlternateColors2 *obj;
	long long answer;
	obj = new AlternateColors2();
	clock_t startTime = clock();
	answer = obj->countWays(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	long long p2;
	
	{
	// ----- test 0 -----
	p0 = 1;
	p1 = 1;
	p2 = 1ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 3;
	p1 = 3;
	p2 = 3ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 6;
	p1 = 4;
	p2 = 9ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 6;
	p1 = 1;
	p2 = 21ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 1000;
	p1 = 2;
	p2 = 1ll;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 100000;
	p1 = 100000;
	p2 = 1666700000ll;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Bob is playing with his ball destroyer robot. Initially, Bob had r red balls, g green balls and b blue balls. The robot repeated the following 3-step program until there were no balls left:
// 
// If there is at least one red ball available, destroy one red ball.
// If there is at least one green ball available, destroy one green ball.
// If there is at least one blue ball available, destroy one blue ball.
// 
// Bob forgot how many balls of each color he initially had. He only remembers that there were n balls in total and that the k-th (1-based index) ball that was destroyed was red. Return the total number of different initial settings that match that description. Formally, return the number of different tuples (r, g, b) such that r + g + b = n and the k-th ball that was destroyed was red.
// 
// DEFINITION
// Class:AlternateColors2
// Method:countWays
// Parameters:int, int
// Returns:long long
// Method signature:long long countWays(int n, int k)
// 
// 
// NOTES
// -It follows from the constraints that the return value will always fit into a long long.
// 
// 
// CONSTRAINTS
// -n will be between 1 and 100000, inclusive.
// -k will be between 1 and n, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 1
// 1
// 
// Returns: 1
// 
// There was only one ball. This ball was necessarily the first ball destroyed. Therefore, it had to be red.
// 
// 1)
// 3
// 3
// 
// Returns: 3
// 
// There are three cases in which the third ball to be destroyed is red:
// r = 3, b = 0, g = 0.
// r = 2, b = 1, g = 0.
// r = 2, b = 0, g = 1.
// 
// 2)
// 6
// 4
// 
// Returns: 9
// 
// 
// 
// 3)
// 6
// 1
// 
// Returns: 21
// 
// 
// 
// 4)
// 1000
// 2
// 
// Returns: 1
// 
// In order for the second destroyed ball to be red, there would have to be zero balls of the other colors.
// 
// 5)
// 100000
// 100000
// 
// Returns: 1666700000
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
