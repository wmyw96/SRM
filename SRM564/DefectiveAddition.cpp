#include <vector>
#include <map>
#include <set>
#include <queue>
#include <bitset>
#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>

using namespace std;

#define X first
#define Y second
#define mk make_pair
#define rep(i, s, t) for (int i = (s); i <= (t); ++i)
#define REP(i, n) rep(i, 1, n)
typedef pair<int, int> PII;
typedef long long LL;
typedef double LD;

#define MOD 1000000007

class DefectiveAddition {
public:
	int n;
	int a[55];
	LL f[55][2];
	LL calc(int a[], int v){
		sort(a + 1, a + 1 + n);
		
		if (a[n] == 0)
			return v == 0;
		LL tt = 1;
		for (LL x = a[n]; x; x >>= 1, tt <<= 1);
		tt >>= 1;
		if (v >= tt * 2)
			return 0;
		int t = tt;
		memset(f, 0, sizeof f);
		f[0][0] = 1;
		REP(i, n - 1) rep(e, 0, 1)
			f[i][e] = (f[i - 1][e] * (min(t - 1, a[i]) + 1) + 
					  f[i - 1][e ^ 1] * max(a[i] - t + 1, 0)) % MOD;
		LL ans = 0;
		if (v < t)
			ans = f[n - 1][0];
		else ans = f[n - 1][1];
		
		a[n] -= t;
		ans += calc(a, v ^ t);
		ans %= MOD;
		return ans;
	}
	int count(vector <int> cards, int _n) {
		n = cards.size();
		REP(i, n) a[i] = cards[i - 1];
		return calc(a, _n);
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	DefectiveAddition *obj;
	int answer;
	obj = new DefectiveAddition();
	clock_t startTime = clock();
	answer = obj->count(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	int t0[] = {2,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 3;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {1,2,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 6;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {4,5,7,11};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 6;
	p2 = 240;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {1,2,3,4,5,6,7,8,9,10};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 15;
	p2 = 1965600;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {1,2,3,4,5,6,7,8,9,10};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 16;
	p2 = 0;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 949480669;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Cucumber Boy is very young.  He is too young for base 10, so he does all his calculations in base 2.  Additionally, he did not learn to add yet. When adding two numbers, he always forgets to do the carries, he just adds each digit independently. As you probably guessed already, the result of his calculation is in fact the bitwise xor of the two input numbers. For example, for Cucumber Boy 1+1 is 0, 1+2 is 3, 2+3 is 1, and 4+7 is 3. (All the numbers in this example are in base 10.)
// 
// Cucumber Boy has a sequence of cards.  Each card contains a positive integer. You are given a vector <int> cards containing those integers.
// 
// You are also given a int n. Cucumber Boy wants to choose a sequence of integers b with the following properties:
// 
// For each i, the integer b[i] is greater than or equal to 0.
// For each i, the integer b[i] is less than or equal to cards[i].
// The "Cucumber Boy sum" (i.e., the bitwise xor) of all elements of the sequence b is equal to n.
// 
// 
// Return the number of such sequences, modulo 1,000,000,007.
// 
// DEFINITION
// Class:DefectiveAddition
// Method:count
// Parameters:vector <int>, int
// Returns:int
// Method signature:int count(vector <int> cards, int n)
// 
// 
// CONSTRAINTS
// -cards will contain between 1 and 50 elements, inclusive.
// -Each element of cards will be between 1 and 1,000,000,000, inclusive.
// -n will be between 1 and 1,000,000,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {2,3}
// 2
// 
// Returns: 3
// 
// Cucumber Boy can choose 12 different sequences: b[0] can be between 0 and 2, inclusive, and b[1] can be between 0 and 3, inclusive.
// Out of those 12 sequences, 3 have the required "Cucumber Boy sum": 0+2 = 2, 1+3 = 2, and 2+0 = 2.
// 
// 1)
// {1,2,3}
// 1
// 
// Returns: 6
// 
// The six good sequences are (0,0,1), (0,1,0), (0,2,3), (1,0,0), (1,1,1), and (1,2,2).
// 
// 2)
// {4, 5, 7, 11}
// 6
// 
// Returns: 240
// 
// 
// 
// 3)
// {1,2,3,4,5,6,7,8,9,10}
// 15
// 
// Returns: 1965600
// 
// 
// 
// 4)
// {1,2,3,4,5,6,7,8,9,10}
// 16
// 
// Returns: 0
// 
// 
// 
// 5)
// {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
// 1
// 
// Returns: 949480669
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
