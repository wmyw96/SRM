#include <vector>
#include <map>
#include <set>
#include <queue>
#include <bitset>
#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>

using namespace std;

#define X first
#define Y second
#define mk make_pair
#define rep(i, s, t) for (int i = (s); i <= (t); ++i)
#define REP(i, n) rep(i, 1, n)
typedef long long LL;
typedef double LD;

class TheBrickTowerEasyDivOne {
public:
	int find(int redCount, int redHeight, int blueCount, int blueHeight) {
		if (redHeight == blueHeight){
           if (redCount == blueCount)
              return redCount * 2;
           else return min(redCount, blueCount) * 2 + 1;
        }
        else{
             int ls = min(redCount, blueCount);
             if (redCount == blueCount){
                return 4 * ls - ls;
             }
             else return 4 * ls + 1 - ls;
        }
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	TheBrickTowerEasyDivOne *obj;
	int answer;
	obj = new TheBrickTowerEasyDivOne();
	clock_t startTime = clock();
	answer = obj->find(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	int p4;
	
	{
	// ----- test 0 -----
	p0 = 1;
	p1 = 2;
	p2 = 3;
	p3 = 4;
	p4 = 4;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 4;
	p1 = 4;
	p2 = 4;
	p3 = 7;
	p4 = 12;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 7;
	p1 = 7;
	p2 = 4;
	p3 = 4;
	p4 = 13;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 47;
	p1 = 47;
	p2 = 47;
	p3 = 47;
	p4 = 94;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	//while (1);
	return 0;
}
// PROBLEM STATEMENT
// 
// John and Brus are building towers using toy bricks.
// They have two types of bricks: red and blue ones.
// The number of red bricks they have is redCount and each of them has a height of redHeight.
// The number of blue bricks they have is blueCount and each of them has a height of blueHeight.
// 
// 
// 
// A tower is built by placing bricks one atop another.
// A brick can be placed either on the ground, or on a brick of a different color.
// (I.e., you are not allowed to put two bricks of the same color immediately on one another.)
// A tower has to consist of at least one brick.
// The height of a tower is the sum of all heights of bricks that form the tower.
// Two towers are considered to be different if they have different heights.
// (Two towers of the same height are considered the same, even if they differ in the number and colors of bricks that form them.)
// 
// 
// 
// You are given the ints redCount, redHeight, blueCount and blueHeight.
// Return the number of different towers that John and Brus can build.
// 
// 
// 
// DEFINITION
// Class:TheBrickTowerEasyDivOne
// Method:find
// Parameters:int, int, int, int
// Returns:int
// Method signature:int find(int redCount, int redHeight, int blueCount, int blueHeight)
// 
// 
// CONSTRAINTS
// -redCount will be between 1 and 474,747,474, inclusive.
// -redHeight will be between 1 and 474,747,474, inclusive.
// -blueCount will be between 1 and 474,747,474, inclusive.
// -blueHeight will be between 1 and 474,747,474, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 1
// 2
// 3
// 4
// 
// Returns: 4
// 
// John and Brus have 1 red brick of height 2 and 3 blue bricks of height 4. Using these bricks, it's possible to build 4 towers:
// red (height 2);
// blue (height 4);
// red, blue (height 6);
// blue, red, blue (height 10).
// 
// 1)
// 4
// 4
// 4
// 7
// 
// Returns: 12
// 
// 2)
// 7
// 7
// 4
// 4
// 
// Returns: 13
// 
// 3)
// 47
// 47
// 47
// 47
// 
// Returns: 94
// 
// END KAWIGIEDIT TESTING




//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
