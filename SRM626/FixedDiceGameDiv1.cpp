#include <vector>
#include <map>
#include <set>
#include <queue>
#include <bitset>
#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>

using namespace std;

#define X first
#define Y second
#define mk make_pair
#define rep(i, s, t) for (int i = (s); i <= (t); ++i)
#define REP(i, n) rep(i, 1, n)
typedef pair<int, int> PII;
typedef long long LL;
typedef double LD;

class FixedDiceGameDiv1 {
public:
	long double f[2666], g[2666], f2[2666], g2[2666];
	double getExpectation(int a, int b, int c, int d) {
		long double ansa = 0, ansb = 0;
		memset(f, 0, sizeof f);
		memset(g, 0, sizeof g);
		f[0] = 1;
		REP(i, a){
			memset(f2, 0, sizeof f2);
			for (int j = b * i; j >= i; --j)
				REP(k, b)
					if (j - k >= 0)
						f2[j] += f[j - k];
			memcpy(f, f2, sizeof f);
		}
		g[0] = 1;
		REP(i, c){
			memset(g2, 0, sizeof g2);
			for (int j = d * i; j >= i; --j)
				REP(k, d) if (j - k >= 0)
					g2[j] += g[j - k];
			memcpy(g, g2, sizeof g);
		}
		printf("%lf\n", double(g[2500/2]));
		rep(i, a, b * a) rep(j, c, c * d){
			if (i > j){
				ansa += i * f[i] * g[j];
				ansb += f[i] * g[j];
			}
		}
		if (fabs(ansb) < 1e-13) return -1;
		return ansa / ansb;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, bool hasAnswer, double p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	FixedDiceGameDiv1 *obj;
	double answer;
	obj = new FixedDiceGameDiv1();
	clock_t startTime = clock();
	answer = obj->getExpectation(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p4 - answer) <= 1e-9 * max(1.0, fabs(p4));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	double p4;
	
	{
	// ----- test 0 -----
	p0 = 1;
	p1 = 2;
	p2 = 1;
	p3 = 5;
	p4 = 2.0;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 3;
	p1 = 1;
	p2 = 1;
	p3 = 3;
	p4 = 3.0;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 1;
	p1 = 5;
	p2 = 1;
	p3 = 1;
	p4 = 3.4999999999999996;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 2;
	p1 = 6;
	p2 = 50;
	p3 = 30;
	p4 = -1.0;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 50;
	p1 = 11;
	p2 = 50;
	p3 = 50;
	p4 = 369.8865999182022;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// Alice and Bob are playing a game.
// Alice rolls a identical b-sided dice.
// Bob rolls c identical d-sided dice.
// The sides of an n-sided die have numbers 1 through n written on them.
// 
// 
// 
// A player's score is the sum of the numbers they rolled on their dice.
// The player with a strictly higher score wins.
// It is possible that neither player wins.
// 
// 
// 
// You are given the ints a, b, c, and d.
// The players already rolled their dice.
// If it's not possible for Alice to win, return -1.
// Otherwise, assume that you don't know what numbers Alice and Bob rolled, but that you know that Alice won the game.
// Return the expected value of Alice's score (given the above assumption).
// 
// 
// DEFINITION
// Class:FixedDiceGameDiv1
// Method:getExpectation
// Parameters:int, int, int, int
// Returns:double
// Method signature:double getExpectation(int a, int b, int c, int d)
// 
// 
// NOTES
// -Your return value must have an absolute or relative error smaller than 1e-3. 
// 
// 
// CONSTRAINTS
// -a, b, c, d will each be between 1 and 50, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 1
// 2
// 1
// 5
// 
// Returns: 2.0
// 
// The only way Alice can win is if she rolls a 2. Thus, if we know Alice wins, we know she rolled a 2. 
// 
// 1)
// 3
// 1
// 1
// 3
// 
// Returns: 3.0
// 
// Alice will always roll a 3. 
// 
// 2)
// 1
// 5
// 1
// 1
// 
// Returns: 3.4999999999999996
// 
// Alice will not win if she rolls a 1. Thus, if we know she wins, her expected score is (2+3+4+5)/4=7/2.
// 
// 3)
// 2
// 6
// 50
// 30
// 
// Returns: -1.0
// 
// No matter what Alice rolls, she will lose. 
// 
// 4)
// 50
// 11
// 50
// 50
// 
// Returns: 369.8865999182022
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
