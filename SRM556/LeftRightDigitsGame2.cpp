#include <vector>
#include <map>
#include <set>
#include <queue>
#include <bitset>
#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>

using namespace std;

#define X first
#define Y second
#define mk make_pair
#define rep(i, s, t) for (int i = (s); i <= (t); ++i)
#define REP(i, n) rep(i, 1, n)
typedef pair<int, int> PII;
typedef long long LL;
typedef double LD;

class LeftRightDigitsGame2{
public:
    string f[55][55][2][2];
    // selected l in the left, r in the right,
    // le = 0 (=b) / 1 (>b)
    // re = 0 (>=b) / 1 (<b)
    int n, a[55], b[55];
    string calc(int l, int r, int le, int re){
        if (l + r == n)
            return (le == 0 && re == 1) ? "A" : "";
        string &ls = f[l][r][le][re];
        if (ls.size()) return ls;
        ls = "A";
        int i = l + r + 1;
        // to the left
        if (le || (a[i] >= b[l + 1])){
            string t = calc(l + 1, r, le | (a[i] > b[l + 1]), re);
            if (t != "A") ls = min(ls, char(a[i]) + t);
        }
        // to the right
        if (i < n){
            string t = calc(l, r + 1, le, (a[i] == b[n - r]) ? re : ((a[i] > b[n - r]) ? 0 : 1) );
            if (t != "A") ls = min(ls, t + char(a[i]));
        }
        //printf("f[%d,%d,%d,%d] =  %s\n", l, r, le, re, ls.c_str());
        return ls;
    }
    string minNumber(string digits, string lowerbound){
        n = digits.size();
        REP(i, n) REP(j, n) rep(e, 0, 1) rep(e2, 0, 1)
            f[i][j][e][e2].clear();
        REP(i, n) a[i] = digits[i - 1];
        REP(i, n) b[i] = lowerbound[i - 1];
        reverse(a + 1, a + 1 + n);
        string ans = calc(0, 0, 0, 0);
        return ans == "A" ? "" : ans;
    }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, string p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	LeftRightDigitsGame2 *obj;
	string answer;
	obj = new LeftRightDigitsGame2();
	clock_t startTime = clock();
	answer = obj->minNumber(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	string p2;
	
	{
	// ----- test 0 -----
	p0 = "565";
	p1 = "556";
	p2 = "556";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "565";
	p1 = "566";
	p2 = "655";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "565";
	p1 = "656";
	p2 = "";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "9876543210";
	p1 = "5565565565";
	p2 = "5678943210";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "8016352";
	p1 = "1000000";
	p2 = "1086352";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You are playing a solitaire game called Left-Right Digits Game. This game uses a deck of N cards. Each card has a single digit written on it. These digits are given as characters in the string digits. More precisely, the i-th character of digits is the digit written on the i-th card from the top of the deck (both indices are 0-based).
// 
// The game is played as follows. First, you place the topmost card (whose digit is the 0-th character of digits) on the table. Then, you pick the cards one-by-one from the top of the deck. For each card, you have to place it either to the left or to the right of all cards that are already on the table.
// 
// After all of the cards have been placed on the table, they now form an N-digit number. You are given a string lowerBound that represents an N-digit number. The primary goal of the game is to arrange the cards in such a way that the number X shown on the cards will be greater than or equal to lowerBound. If there are multiple ways to satisfy the primary goal, you want to make the number X as small as possible.
// 
// Return the smallest possible value of X you can achieve, as a string containing N digits. If it is impossible to achieve a number which is greater than or equal to lowerBound, return an empty string instead.
// 
// DEFINITION
// Class:LeftRightDigitsGame2
// Method:minNumber
// Parameters:string, string
// Returns:string
// Method signature:string minNumber(string digits, string lowerBound)
// 
// 
// NOTES
// -lowerBound has no leading zeros. This means that any valid number X should also have no leading zeros (since otherwise it will be smaller than lowerBound).
// 
// 
// CONSTRAINTS
// -digits will contain between 1 and 50 characters, inclusive.
// -Each character of digits will be between '0' and '9', inclusive.
// -lowerBound will contain the same number of characters as digits.
// -Each character of lowerBound will be between '0' and '9', inclusive.
// -The first character of lowerBound will not be '0'.
// 
// 
// EXAMPLES
// 
// 0)
// "565"
// "556"
// 
// Returns: "556"
// 
// You can achieve exactly 556. The solution is as follows:
// 
// Place the first card on the table.
// Place the second card to the right of all cards on the table.
// Place the last card to the left of all cards on the table.
// 
// 
// 1)
// "565"
// "566"
// 
// Returns: "655"
// 
// 
// 
// 2)
// "565"
// "656"
// 
// Returns: ""
// 
// The largest number you can achieve is 655, but it is still less than 656.
// 
// 3)
// "9876543210"
// "5565565565"
// 
// Returns: "5678943210"
// 
// 
// 
// 4)
// "8016352"
// "1000000"
// 
// Returns: "1086352"
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
