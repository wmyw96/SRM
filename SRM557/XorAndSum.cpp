#include <vector>
#include <map>
#include <set>
#include <queue>
#include <bitset>
#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>

using namespace std;

#define X first
#define Y second
#define mk make_pair
#define rep(i, s, t) for (int i = (s); i <= (t); ++i)
#define per(i, s, t) for (int i = (s); i >= (t); --i)
#define REP(i, n) rep(i, 1, n)
typedef pair<int, int> PII;
typedef long long LL;
typedef double LD;

class XorAndSum {
public:
	LL a[111], b[111];
	int n, tot;
	long long maxSum(vector<long long> number) {
		n = number.size();
		tot = 0;
		REP(i, n) a[i] = number[i - 1];
		per(k, 60, 0) rep(i, tot + 1, n)
			if ((a[i] >> k) & 1){
				swap(a[i], a[tot + 1]);
				b[++tot] = (1LL << k);
				REP(j, n) if (tot != j && (a[j] & b[tot]))
					a[j] ^= a[tot];
			}
		/*per(i, tot, 2)
			per(j, i - 1, 1)
				if (a[j] & b[i]) a[j] ^= a[i];*/
		//REP(i, n) printf("%I64d\n", a[i]);
		rep(i, 2, n) a[1] ^= a[i];
		rep(i, 2, n) a[i] ^= a[1];
		LL ans = 0;
		REP(i, n) ans += a[i];
		return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector<long long> p0, bool hasAnswer, long long p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	XorAndSum *obj;
	long long answer;
	obj = new XorAndSum();
	clock_t startTime = clock();
	answer = obj->maxSum(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector<long long> p0;
	long long p1;
	
	{
	// ----- test 0 -----
	long long t0[] = {1ll,0ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2ll;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	long long t0[] = {1ll,2ll,3ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 8ll;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	long long t0[] = {0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0ll;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	long long t0[] = {2ll,3ll,5ll,7ll,11ll,13ll,17ll,19ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 233ll;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	long long t0[] = {123456789012345ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1234567890123450ll;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	long long t0[] = {627ll,674ll,281ll,272ll,289ll,877ll,62ll,122ll,603ll,189ll,615ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 10742ll;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	long long t0[] = {557ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 557ll;
	all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You have a collection of cards. Each card contains a single non-negative integer. The integers written on the cards are not necessarily distinct. You are given a vector<long long> number. Each element of number is a number written on one of the cards.
// 
// You may perform the following operation as many times as you want:
// 
// Choose two distinct cards. Let the numbers written on them be A and B, respectively.
// Erase the number A and replace it with the number (A xor B). The number on the other card will remain unchanged (i.e., it will still be B).
// 
// Your goal is to maximize the sum of numbers written on your cards. Return the largest possible value of this sum.
// 
// DEFINITION
// Class:XorAndSum
// Method:maxSum
// Parameters:vector<long long>
// Returns:long long
// Method signature:long long maxSum(vector<long long> number)
// 
// 
// NOTES
// -The operator "xor" in the problem statement is the bitwise xor operation. For example, we have 9 xor 3 = 10, because 9 in binary is 1001, 3 in binary is 0011, and their bitwise xor is 1010 in binary, which is 10 in decimal.
// 
// 
// CONSTRAINTS
// -number will contain between 1 and 50 elements, inclusive.
// -Each element in number will be between 0 and 1,000,000,000,000,000 (10^15), inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {1,0}
// 
// Returns: 2
// 
// One optimal solution is: change 0 into (1 xor 0) = 1. Then the sum will be 1+1 = 2.
// 
// 
// 1)
// {1,2,3}
// 
// Returns: 8
// 
// One optimal solution is: change 1 to (2 xor 1) = 3. Then the sum will be 3 + 2 + 3 = 8.
// 
// 2)
// {0,0,0,0,0,0,0,0,0,0}
// 
// Returns: 0
// 
// We can't get any number other than 0.
// 
// 3)
// {2,3,5,7,11,13,17,19}
// 
// Returns: 233
// 
// 
// 
// 4)
// {123456789012345, 0, 0, 0, 0, 0, 0, 0, 0, 0}
// 
// Returns: 1234567890123450
// 
// 
// 
// 5)
// {627,674,281,272,289,877,62,122,603,189,615}
// 
// Returns: 10742
// 
// 
// 
// 6)
// {557}
// 
// Returns: 557
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
