#include <vector>
#include <map>
#include <set>
#include <queue>
#include <bitset>
#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>

using namespace std;

#define X first
#define Y second
#define mk make_pair
#define rep(i, s, t) for (int i = (s); i <= (t); ++i)
#define REP(i, n) rep(i, 1, n)
typedef pair<int, int> PII;
typedef long long LL;
typedef double LD;

class FoxAndMountainEasy {
public:
	string possible(int n, int h0, int hn, string history) {
		int m = history.size();
		int s = 0, d = 0;
		REP(i, m){
			if (history[i - 1] == 'D') --s;
			if (history[i - 1] == 'U') ++s;
			if (-s > d) d = -s;
		}
		n -= m;
		if (h0 < d){
			n -= (d - h0);
			h0 = d;
		}
		h0 += s;
		int t = abs(hn - h0);
		if (t > n || (n - t) % 2 == 1)
			return "NO";
		else return "YES";
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, string p3, bool hasAnswer, string p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << "\"" << p3 << "\"";
	cout << "]" << endl;
	FoxAndMountainEasy *obj;
	string answer;
	obj = new FoxAndMountainEasy();
	clock_t startTime = clock();
	answer = obj->possible(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p4 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	string p3;
	string p4;
	
	{
	// ----- test 0 -----
	p0 = 4;
	p1 = 0;
	p2 = 4;
	p3 = "UU";
	p4 = "YES";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 4;
	p1 = 0;
	p2 = 4;
	p3 = "D";
	p4 = "NO";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 4;
	p1 = 100000;
	p2 = 100000;
	p3 = "DDU";
	p4 = "YES";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 4;
	p1 = 0;
	p2 = 0;
	p3 = "DDU";
	p4 = "NO";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 20;
	p1 = 20;
	p2 = 20;
	p3 = "UDUDUDUDUD";
	p4 = "YES";
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 20;
	p1 = 0;
	p2 = 0;
	p3 = "UUUUUUUUUU";
	p4 = "YES";
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = 20;
	p1 = 0;
	p2 = 0;
	p3 = "UUUUUUUUUUU";
	p4 = "NO";
	all_right = KawigiEdit_RunTest(6, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Fox Ciel lives in a beautiful countryside.
// She loves climbing mountains.
// Yesterday, she went hiking in the mountains.
// 
// 
// 
// Her trip can be described as a sequence of (n+1) integers: h[0], h[1], ..., h[n]. 
// These values represent altitudes visited by Fox Ciel during the trip, in order.
// Fox Ciel does not remember the precise sequence, but she remembers the following:
// 
// for each i, h[i] >= 0
// h[0] = h0
// h[n] = hn
// for each i, abs(h[i+1]-h[i]) = 1
// 
// 
// 
// 
// The last condition means that in each step the altitude of Fox Ciel either increased by 1, or decreased by 1.
// We will call the two types of steps "steps up" and "steps down", respectively.
// Steps up will be denoted 'U' and steps down will be denoted 'D'.
// 
// 
// 
// You are given the ints n, h0, and hn: the length of the trip, the altitude at the beginning, and the altitude at the end.
// In addition to these, Fox Ciel remembers some contiguous segment of her trip.
// You are given this segment as a string history.
// Each character of history is either 'U' or 'D'.
// 
// 
// 
// Check whether there is a valid trip that matches everything Fox Ciel remembers.
// Return "YES" (quotes for clarity) if there is at least one such trip, or "NO" if there is none.
// 
// DEFINITION
// Class:FoxAndMountainEasy
// Method:possible
// Parameters:int, int, int, string
// Returns:string
// Method signature:string possible(int n, int h0, int hn, string history)
// 
// 
// CONSTRAINTS
// -n will be between 1 and 100,000, inclusive.
// -history will contain between 1 and min(50,n) characters, inclusive.
// -Each character in history will be either 'U' or 'D'.
// -h0 will be between 0 and 100,000, inclusive.
// -hn will be between 0 and 100,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 4
// 0
// 4
// "UU"
// 
// Returns: "YES"
// 
// The only solution is: h[] = {0, 1, 2, 3, 4}, the history of the entire trip will be "UUUU".
// 
// 1)
// 4
// 0
// 4
// "D"
// 
// Returns: "NO"
// 
// Based on n, h0 and hn, the history of the entire trip must be "UUUU". There is no 'D' in this history.
// 
// 2)
// 4
// 100000
// 100000
// "DDU"
// 
// Returns: "YES"
// 
// We have the following solution: h[] = {100000, 100001, 100000, 99999, 100000}, the history of the entire trip is "UDDU".
// 
// 3)
// 4
// 0
// 0
// "DDU"
// 
// Returns: "NO"
// 
// 
// 
// 4)
// 20
// 20
// 20
// "UDUDUDUDUD"
// 
// Returns: "YES"
// 
// 
// 
// 5)
// 20
// 0
// 0
// "UUUUUUUUUU"
// 
// Returns: "YES"
// 
// 
// 
// 6)
// 20
// 0
// 0
// "UUUUUUUUUUU"
// 
// Returns: "NO"
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
