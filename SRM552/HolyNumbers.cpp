#include <vector>
#include <map>
#include <set>
#include <queue>
#include <bitset>
#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>

using namespace std;

#define X first
#define Y second
#define mk make_pair
#define rep(i, s, t) for (int i = (s); i <= (t); ++i)
#define REP(i, n) rep(i, 1, n)
typedef pair<int, int> PII;
typedef long long LL;
typedef double LD;

class HolyNumbers {
public:
	int tot, c[1111111];
	LL ans;
	LL P[1111111];
	
	long long dfs(int x, LL N){
		if (x > tot || N < P[x])
			return 1;
		if ((N / (P[x] * P[x])) == 0)
			return lower_bound(P + 1, P + 1 + tot, N + 1) - P - x + 1;
		LL ans = dfs(x + 1, N);
		N /= P[x];
		while (N){
			ans += dfs(x + 1, N);
			N /= P[x] * P[x];
		}
		//printf("dfs(%d,%lld) =  %lld\n", x, t, ans);
		return ans;
	}
	long long count(long long upTo, int maximalPrime) {
		rep(i, 2, maximalPrime){
			if (c[i] == 0){
				P[++tot] = i;
				c[i] = i;
			}
			REP(j, tot){
				if (i * P[j] > maximalPrime) break;
				c[i * P[j]] = P[j];
				if (c[i] == P[j]) break;
			}
		}
		LL ans = dfs(1, upTo);
		//cout << ans << endl;
		return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, long long p0, int p1, bool hasAnswer, long long p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	HolyNumbers *obj;
	long long answer;
	obj = new HolyNumbers();
	clock_t startTime = clock();
	answer = obj->count(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	long long p0;
	int p1;
	long long p2;
	
	{
	// ----- test 0 -----
	p0 = 10ll;
	p1 = 100;
	p2 = 8ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 10ll;
	p1 = 3;
	p2 = 5ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 123ll;
	p1 = 12;
	p2 = 32ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 123ll;
	p1 = 456;
	p2 = 88ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 123456789ll;
	p1 = 12345;
	p2 = 25994500ll;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// NOTE: This problem statement contains superscripts that may not display properly if viewed outside of the applet.
// 
// In John's country, the main religion is based on holy numbers. The religion claims something silly like "the holy numbers are those that contain only 4s and 7s in their decimal expansion".
// 
// John is a heretic. He does believe in holy numbers, but he is convinced that the religion is mistaken in their definition. The holiness of a number simply cannot depend on the base in which it is represented! After a long meditation, John realized that the prime factorization of a number does not depend on the base in which the number is represented. That was the correct way!
// 
// Many years later, John's theory was finally ready. A prime p likes the number x if one of the following two conditions is satisfied:
// The prime p does not divide x.
// The prime p does divide x, p is less than or equal to maximalPrime, and the highest power of p that divides x is odd. (In other words, there is a positive odd integer k such that pk divides x, and pk+1 does not divide x.)
// The number x is considered holy if all primes like it.
// 
// You are given a long long upTo and the int maximalPrime. Return the count of holy numbers between 1 and upTo, inclusive.
// 
// DEFINITION
// Class:HolyNumbers
// Method:count
// Parameters:long long, int
// Returns:long long
// Method signature:long long count(long long upTo, int maximalPrime)
// 
// 
// NOTES
// -A prime number is a positive integer with exactly 2 positive integer divisors. The first few primes are 2, 3, 5, 7, 11, ...
// 
// 
// CONSTRAINTS
// -upTo is between 1 and 1010, inclusive.
// -maximalPrime is between 1 and 106, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 10
// 100
// 
// Returns: 8
// 
// 1, 2, 3, 5, 6, 7, 8 and 10 are holy numbers.
// 
// 1)
// 10
// 3
// 
// Returns: 5
// 
// 5, 7 and 10 are no longer holy.
// 
// 2)
// 123
// 12
// 
// Returns: 32
// 
// 
// 
// 3)
// 123
// 456
// 
// Returns: 88
// 
// 
// 
// 4)
// 123456789
// 12345
// 
// Returns: 25994500
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
