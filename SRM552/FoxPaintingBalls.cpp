#include <vector>
#include <map>
#include <set>
#include <queue>
#include <bitset>
#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>

using namespace std;

#define X first
#define Y second
#define mk make_pair
#define rep(i, s, t) for (int i = (s); i <= (t); ++i)
#define REP(i, n) rep(i, 1, n)
typedef pair<int, int> PII;
typedef long long LL;
typedef double LD;

class FoxPaintingBalls {
public:
    LL S(LL n){
       return n * (n + 1) / 2;
    }
	long long theMax(long long R, long long G, long long B, int N) {
         LL t = S((N+2)/3) + S((N+1)/3-1) + S((N)/3);
         LL t2 = S((N+2)/3-1) + S((N+1)/3) + S((N)/3);
         t -= t2;
         if (N == 1)
            return (R + B + G);
         LL l = 0, r = 2000000000000000000LL;
         while (l + 1 < r){
               LL mid = (l + r) >> 1;
               LL R1 = R - t2 * mid,
                  G1 = G - t2 * mid,
                  B1 = B - t2 * mid;
               if (mid <= min(R, min(G, B)) / t2 && R1 + G1 + B1 >= mid * t)
                  l = mid;
               else r = mid;
         }
         return l;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, long long p0, long long p1, long long p2, int p3, bool hasAnswer, long long p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	FoxPaintingBalls *obj;
	long long answer;
	obj = new FoxPaintingBalls();
	clock_t startTime = clock();
	answer = obj->theMax(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	long long p0;
	long long p1;
	long long p2;
	int p3;
	long long p4;
	
	{
	// ----- test 0 -----
	p0 = 2ll;
	p1 = 2ll;
	p2 = 2ll;
	p3 = 3;
	p4 = 1ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 1ll;
	p1 = 2ll;
	p2 = 3ll;
	p3 = 3;
	p4 = 0ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 8ll;
	p1 = 6ll;
	p2 = 6ll;
	p3 = 4;
	p4 = 2ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 7ll;
	p1 = 6ll;
	p2 = 7ll;
	p3 = 4;
	p4 = 2ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 100ll;
	p1 = 100ll;
	p2 = 100ll;
	p3 = 4;
	p4 = 30ll;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 19330428391852493ll;
	p1 = 48815737582834113ll;
	p2 = 11451481019198930ll;
	p3 = 3456;
	p4 = 5750952686ll;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = 1ll;
	p1 = 1ll;
	p2 = 1ll;
	p3 = 1;
	p4 = 3ll;
	all_right = KawigiEdit_RunTest(6, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// A Ball Triangle is a set of identical balls placed in a triangular shape. A Ball Triangle has N rows, numbered 1 to N from top to bottom. For all i, 1 <= i <= N, the i-th row contains i balls. For example, the following image shows a Ball Triangle with N=3.
// 
// 
// 
// 
// Fox Jiro has infinitely many Ball Triangles. He can paint a Ball Triangle according to the following conditions:
// 
// Each of the balls has to be painted either red, green, or blue.
// No two adjacent balls may share the same color.
// 
// The following image shows one valid coloring of a Ball Triangle for N=3.
// 
// 
// 
// 
// Jiro wants to paint as many Ball Triangles as he can.
// As long as he follows the rules above, he may color the Ball Triangles in any way he likes.
// Some of the colored Ball Triangles may look exactly the same, but they don't have to.
// The only other constraint is the total amount of paint available to Jiro:
// In all the triangles together, he can paint at most R balls red, G balls green, and B balls blue.
// 
// You are given the long longs R, G, and B.
// You are also given the int N.
// Return the maximum possible number of Ball Triangles Jiro can paint.
// 
// DEFINITION
// Class:FoxPaintingBalls
// Method:theMax
// Parameters:long long, long long, long long, int
// Returns:long long
// Method signature:long long theMax(long long R, long long G, long long B, int N)
// 
// 
// CONSTRAINTS
// -R, G and B will each be between 0 and 1,000,000,000,000,000,000 (10^18), inclusive.
// -N will be between 1 and 1,000,000,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 2
// 2
// 2
// 3
// 
// Returns: 1
// 
// Jiro can paint one Ball Triangle in the same way as in the image in the statement.
// 
// 1)
// 1
// 2
// 3
// 3
// 
// Returns: 0
// 
// This time Jiro can paint no Ball Triangles.
// 
// 2)
// 8
// 6
// 6
// 4
// 
// Returns: 2
// 
// 
// 
// 3)
// 7
// 6
// 7
// 4
// 
// Returns: 2
// 
// 
// 
// 4)
// 100
// 100
// 100
// 4
// 
// Returns: 30
// 
// 
// 
// 5)
// 19330428391852493
// 48815737582834113
// 11451481019198930
// 3456
// 
// Returns: 5750952686
// 
// 
// 
// 6)
// 1
// 1
// 1
// 1
// 
// Returns: 3
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
