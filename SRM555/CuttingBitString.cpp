#include <vector>
#include <map>
#include <set>
#include <queue>
#include <bitset>
#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>

using namespace std;

#define X first
#define Y second
#define mk make_pair
#define rep(i, s, t) for (int i = (s); i <= (t); ++i)
#define REP(i, n) rep(i, 1, n)
typedef pair<int, int> PII;
typedef long long LL;
typedef double LD;

class CuttingBitString {
public:
	long long p[55];
	int n;
	int f[55];
	int getmin(string S) {
		n = S.size();
		p[0] = 1;
		REP(i, 22) p[i] = p[i - 1] * 5;
		REP(i, n){
			f[i] = 1000000000;
			LL s = 0;
			for (int j = i; j >= 1; --j){
				s = s + ((LL(S[j - 1] - '0')) << (i - j));
				if (S[j - 1] == '0') continue;
				rep(k, 0, 22)
					if (s == p[k]){
						//printf("cc %d %d\n", j, i);
						f[i] = min(f[i], f[j - 1] + 1);
					}
			}
			//printf("%d %d\n", i, f[i]);
		}
		return (f[n] == 1000000000) ? -1 : f[n];
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	CuttingBitString *obj;
	int answer;
	obj = new CuttingBitString();
	clock_t startTime = clock();
	answer = obj->getmin(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	
	{
	// ----- test 0 -----
	p0 = "101101101";
	p1 = 3;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "1111101";
	p1 = 1;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "00000";
	p1 = -1;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "110011011";
	p1 = 3;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "1000101011";
	p1 = -1;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "111011100110101100101110111";
	p1 = 5;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// We are in a distant future.
// After the downfall of mankind, the Earth is now ruled by fairies.
// The "Turing game Online" website is hot among fairies right now.
// On this website, everyone can play the programming puzzle "Turing game".
// 
// Fairies love powers of 5, that is, the numbers 1, 5, 25, 125, 625, and so on.
// In the Turing game, the player is given a string of bits (zeros and ones).
// The ideal situation is when the string is represents a power of 5 in binary, with no leading zeros.
// If that is not the case, the fairy player tries to cut the given string into pieces, each piece being a binary representation of a power of 5, with no leading zeros.
// Of course, it may be the case that even this is impossible.
// In that case, the fairy player becomes depressed, and bad things happen when a fairy gets depressed.
// You, as one of the surviving humans, are in charge of checking the bit strings to prevent the bad things from happening.
// 
// You are given a string S that consists of characters '0' and '1' only.
// S represents the string given to a player of the Turing game.
// Return the smallest positive integer K such that it is possible to cut S into K pieces, each of them being a power of 5.
// If there is no such K, return -1 instead.
// 
// DEFINITION
// Class:CuttingBitString
// Method:getmin
// Parameters:string
// Returns:int
// Method signature:int getmin(string S)
// 
// 
// CONSTRAINTS
// -S will contain between 1 and 50 characters, inclusive.
// -Each character in S will be either '0' or '1'.
// 
// 
// EXAMPLES
// 
// 0)
// "101101101"
// 
// Returns: 3
// 
// We can split the given string into three "101"s.
// Note that "101" is 5 in binary.
// 
// 1)
// "1111101"
// 
// Returns: 1
// 
// "1111101" is 5^3.
// 
// 2)
// "00000"
// 
// Returns: -1
// 
// 0 is not a power of 5.
// 
// 3)
// "110011011"
// 
// Returns: 3
// 
// Split it into "11001", "101" and "1".
// 
// 4)
// "1000101011"
// 
// Returns: -1
// 
// 
// 
// 5)
// "111011100110101100101110111"
// 
// Returns: 5
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
