#include <vector>
#include <map>
#include <set>
#include <queue>
#include <bitset>
#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>

using namespace std;

#define X first
#define Y second
#define mk make_pair
#define rep(i, s, t) for (int i = (s); i <= (t); ++i)
#define REP(i, n) rep(i, 1, n)
typedef pair<int, int> PII;
typedef long long LL;
typedef double LD;

class PalindromePermutations {
public:
	int n; int cnt[111];
	double palindromeProbability(string word) {
		n = word.size();
		memset(cnt, 0, sizeof cnt);
		REP(i, n) cnt[word[i - 1] - 'a' + 1]++;
		if (n % 2 == 0){
			REP(i, 26) if (cnt[i] % 2 == 1)
				return 0.0;
			double t = 1.0;
			REP(i, 26) REP(j, cnt[i] / 2) t = t * (cnt[i] / 2 + j);
			REP(i, n >> 1)
				t = t / (n / 2 + i);
			return t;
		}
		else{
			int tt = 0, ff = 0;
			REP(i, 26)
				if (cnt[i] % 2 == 1){
					tt = i;
					ff++;
					cnt[i]--;
				}
			if (ff != 1) return 0.0;
			double t = 1.0;
			REP(i, 26) REP(j, cnt[i] / 2) t = t * (cnt[i] / 2 + j);
			REP(i, n / 2 + 1)
				t = t / (n / 2 + i);
			t = t * (cnt[tt] + 1);
			return t;
		}
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, double p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	PalindromePermutations *obj;
	double answer;
	obj = new PalindromePermutations();
	clock_t startTime = clock();
	answer = obj->palindromeProbability(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p1 - answer) <= 1e-9 * max(1.0, fabs(p1));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	double p1;
	
	{
	// ----- test 0 -----
	p0 = "haha";
	p1 = 0.3333333333333333;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "xxxxy";
	p1 = 0.2;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "xxxx";
	p1 = 1.0;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "abcde";
	p1 = 0.0;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhff";
	p1 = 0.025641025641025637;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// A palindrome is a word that reads the same forwards and backwards. For example, "a", "abba", and "zzz" are palindromes, while "ab" and "xxxyx" are not.
// 
// The anagram of a string S is any string we can obtain from S by rearranging its letters. For example, the string "haha" has exactly six anagrams: "aahh", "ahah", "ahha", "haah", "haha", and "hhaa".
// 
// We are given a string word. We will choose one of its anagrams uniformly at random. Return the probability that the chosen anagram will be a palindrome.
// 
// DEFINITION
// Class:PalindromePermutations
// Method:palindromeProbability
// Parameters:string
// Returns:double
// Method signature:double palindromeProbability(string word)
// 
// 
// NOTES
// -The returned value must have an absolute or a relative error of less than 1e-9.
// 
// 
// CONSTRAINTS
// -word will contain between 1 and 50 characters, inclusive.
// -Each character of word will be a lowercase English letter ('a'-'z').
// 
// 
// EXAMPLES
// 
// 0)
// "haha"
// 
// Returns: 0.3333333333333333
// 
// Each of the six anagrams of "haha" will be selected with probability 1/6.
// Two of them are palindromes: "ahha" and "haah".
// Hence, the probability of selecting a palindrome is 2/6.
// 
// 1)
// "xxxxy"
// 
// Returns: 0.2
// 
// 
// 
// 2)
// "xxxx"
// 
// Returns: 1.0
// 
// This word only has one anagram: "xxxx". That is a palindrome.
// 
// 3)
// "abcde"
// 
// Returns: 0.0
// 
// Regardless of how we rearrange the letters of "abcde", we will never get a palindrome.
// 
// 4)
// "hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhff"
// 
// Returns: 0.025641025641025637
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
